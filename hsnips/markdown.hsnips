global
// JavaScript code
function gen_matrix(nrow, ncol) {
	let results = "";
	let order = 1;
	for (var i=0; i<nrow; i++){
		results += '	';
		for(var j = 0;j <ncol-1;j++){
			results += "$" +(order ).toString() + " & ";
			order ++;
		}
		results += "$"+(order).toString() +" \\\\" + "\\ ";
		order ++;
	}
	return results;
}

function tes_matrix(nrow, ncol,t) {
	let results = "";
	let order = 1;
	for (var i=0; i<nrow; i++){
		results += '	';
		for(var j = 0;j <ncol-1;j++){
			if (order > 1 ){
				results += "${" +(order ).toString() + ":" + t[order-2] + "}\t & ";
			}
			else{
				results += "$" +(order ).toString()  + " & ";
			}
			order ++;
		}
		results += "$"+(order).toString() +" \\\\" + "\\ ";
		order ++;
	}
	return results;
}

// 输出一个表格
function createTable(rows, cols) {
    let ret = "";
    for (let i = 0; i < parseInt(rows) + 2; i++) {
        for (let j = 0; j < parseInt(cols); j++) {
            if (i === 1) {
                ret += "|---";
            } else {
                ret += "|  ";
            }
        }
        ret += "|\n"
    }
    return ret;
}

function math(context) {
  return context.scopes.some(s => s.includes("math"));
}

// inline & block math

function inline_math(context){
  return context.scopes.some(s => s.includes("math.inline"));
}

function block_math(context){
  return context.scopes.some(s => s.includes("math.block")) || context.scopes.some(s => s.includes("math.display"));
}

endglobal


# == Fraction Match ==

context math(context)
snippet // "Fraction" iA
\\frac{${1}}{$2}$0
endsnippet 

context math(context)
snippet `(([+-]?([0-9]*[.])?[0-9]+%?)|(\d*)(\\)?([A-Za-z!]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" iA
\frac{``rv = m[1]``}{$1}$0
endsnippet

context math(context)
priority 200
snippet `(?<=\s)(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega|[A-z]{1,2})?(_[A-z0-9]|_\{[^}]+\})?(\^[A-z0-9]|\^\{[^}]+\})?(_[A-z0-9]|_\{[^}]+\})?(\([^)]+\))(_[A-z0-9]|_\{[^}]+\})?(\^[A-z0-9]|\^\{[^}]+\})?(_[A-z0-9]|_\{[^}]+\})?\/` "Fraction with ()" iA
``rv = "\\frac{" + m.slice(1, m.length).join('') + "}{$1}$2"``
endsnippet

# == Hat Operation ==

# ==== Auto Capture Hat Operation ====
context math(context)
snippet `(\(?)(\\?[a-zA-Z]\w*)(\)?)(hbar|BAR)` "Bar" iA
\overline{``rv = m[1] + m[2] + m[3]``}
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*)(htd|TD)` "tilde" iA
\widetilde{``rv = m[1]``}
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*)(hat|HAT)` "hat" iA
\hat{``rv = m[1]``}
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*)(hvec)` "Vector postfix" iA
\vec{``rv = m[1]``}
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*)(rta)` "Vector postfix" iA
\overrightarrow{``rv = m[1]``}
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*)(hdot)` "dot" iA
\dot{``rv = m[1]``}
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*)(hddot)` "ddot" iA
\ddot{``rv = m[1]``}
endsnippet

context math(context)
snippet hsq "\sqrt{}" iA
\sqrt{${1}}$0
endsnippet

# == Superscript Operation ==

context math(context)
snippet invs "inverse" wA
^{-1}
endsnippet

priority 10000
context math(context)
snippet TR "inverse" iA
^{\mathsf{T}}
endsnippet

context math(context)
snippet CL "complement" iA
^{C}
endsnippet

context math(context)
snippet R+ "R0+" iA
R_0^+
endsnippet

context math(context)
snippet pow "power" iA
^{${1:2}}$0
endsnippet

# == Subscript Operation ==

context math(context)
snippet td "subscript" iA
_{${1}}$0
endsnippet

context math(context)
snippet `([a-z])(\d)` "auto subscript" wA
`` rv = m[1] + "_" + m[2]``
endsnippet

priority 100
context math(context)
snippet `([a-z])_(\d{2})` "auto subscript" wA
`` rv = m[1] + "_{" + m[2] + "}" ``
endsnippet

priority 100
context math(context)
snippet `([a-z])S(\d)` "auto subscript" wA
`` rv = m[1] + "_{" + m[2] + "$1}$2"``
endsnippet

context math(context)
snippet `\b(?<!\\)([A-Za-z])S([a-z])\2` "auto subscript 2" iA
`` rv = m[1] + "_{" + m[2].substring(0, 1) + "$1}$2"``
endsnippet

# Custom: Add more greek letters
context math(context)
snippet `(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)([a-z])\2` "auto subscript for greek letter" iA
`` rv = m[1] + "_" + m[2].substring(0, 1) ``
endsnippet

context math(context)
snippet `(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)S([a-z])\2` "auto subscript for greek letter" iA
`` rv = m[1] + "_{${1:" + m[2].substring(0, 1) + "}}$2"``
endsnippet

# == Font Operation ==

# ==== Static Operation ====

context math(context)
snippet txt "text" iA
\text{$1}$0
endsnippet

context math(context)
snippet tit "text it" iA
\textit{$1}$0
endsnippet

context math(context)
snippet mcal "mathcal" i
\mathcal{$1}$0
endsnippet

context math(context)
snippet mbb "mathbb" iA
\mathbb{$1}$0
endsnippet

context math(context)
snippet mbf "mathbb" iA
\mathbf{$1}$0
endsnippet

context math(context)
snippet mbf "mathbm" iA
\mathbf{$1}$0
endsnippet

context math(context)
snippet cE "chem" iA
\ce{$1}$0
endsnippet

context math(context)
snippet pU "chem" iA
\pu{$1}$0
endsnippet

context math(context)
snippet +- "pm" iA
\pm
endsnippet

context math(context)
snippet -+ "mp" iA
\mp
endsnippet

# ==== Dynamic Operation ====

priority 100
context math(context)
snippet `(\\?[a-zA-Z]\w*)(bf|BF)` "mathbf" iA
\mathbf{``rv = m[1]``}
endsnippet

priority 100
context math(context)
snippet `(\\?[a-zA-Z]\w*)(bm|BM)` "mathbm" iA
\bm{``rv = m[1]``}
endsnippet

priority 100
context math(context)
snippet `(\\?[a-zA-Z]\w*)(bs)` "boldsymbol" iA
\boldsymbol{``rv = m[1]``}
endsnippet

priority 100
context math(context)
snippet `(\\?[a-zA-Z]\w*)mcal` "mathcal" iA
\mathcal{``rv = m[1].toUpperCase() ``} $0
endsnippet

priority 100
context math(context)
snippet `(?<!\\)\b([a-zA-Z]+)rm` "mathrm" iA
\mathrm{``rv = m[1]``}
endsnippet

priority 100
context math(context)
snippet `(\\?[a-zA-Z]\w*)mbb` iA
\mathbb{``rv = m[1]``} $0
endsnippet


# == Auto Symbol ==

context math(context)
snippet oo "\infty" wA
\infty
endsnippet

context math(context)
snippet ... "cdots" iA
\cdots 
endsnippet

context math(context)
snippet ,,, "dotsc" iA
\dotsc
endsnippet

context math(context)
snippet <> "hokje" iA
\diamond 
endsnippet

# +... -> , \cdots
# -  ... -> , \cdots
# add a space if there already is one.
priority 101
context math(context)
snippet `(?<=[-+])\s*\.\.\.` "smart cdots" irA
 \cdots 
endsnippet

# It seems that \ldots is only used when , ..., 
# ,... -> , \ldots
# ,  ... -> , \ldots
priority 101
context math(context)
snippet `(?<=,)(\s*)\.\.\.` "smart ldots" irA
 \ldots 
endsnippet

context math(context)
snippet ** "dot multiply" iA
\cdot 
endsnippet

context math(context)
snippet xx "cross" iA
\times 
endsnippet

context math(context)
snippet eps "epsilon" wA
\epsilon
endsnippet

context math(context)
snippet veps "varepsilon" wA
\varepsilon
endsnippet

context math(context)
snippet `(?<=\b|\d+)(?<!\\)(sin|cos|tan|arccot|cot|csc|sec|ln|log|exp|star|perp|arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|oint|iiint|iint|int|ell|nabla|notin|sim|min|max|iff|in)` "function" wA
``
rv = "\\" + m[1]
``
endsnippet

context math(context)
snippet `(?<=\b|\d+)(?<!\\)(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|varphi|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)` "greek" wA
\\``rv = m[1]``
endsnippet

# ==== Space Symbol ====
context math(context)
snippet `(?<=\b|\d+)(?<!\\)(quad)` "ln" wA
\\``rv = m[1]``
endsnippet

# ==== Logic Symbol ====


context math(context)
snippet -> "to" iA
\to 
endsnippet

context math(context)
snippet !> "mapsto" iA
\mapsto 
endsnippet

context math(context)
snippet !! "not neg" iA
\neg 
endsnippet

context math(context)
snippet && "and" iA
\land 
endsnippet

context math(context)
snippet || "or" iA
\lor 
endsnippet

context math(context)
snippet xor "xor" iA
\oplus 
endsnippet

context math(context)
snippet vdash "vdash" iA
\\vdash
endsnippet

context math(context)
snippet => "implies" iA
\implies
endsnippet

context math(context)
snippet =< "implied by" iA
\impliedby
endsnippet

context math(context)
snippet EE "exist" iA
\exists 
endsnippet

context math(context)
snippet AA "forall" iA
\forall 
endsnippet

context math(context)
snippet bec "because" iA
\because 
endsnippet

context math(context)
snippet thr "therefore" iA
\therefore 
endsnippet


# ==== Compare Symbol ====

context math(context)
snippet -- "setminus" iA
\setminus
endsnippet

context math(context)
snippet sjeq "triangle left eq" iA
\trianglelefteq
endsnippet

context math(context)
snippet >= "greater than" iA
\geqslant $0
endsnippet

context math(context)
snippet dis "displaystyle" iA
\displaystyle 
endsnippet

context math(context)
snippet <= "less than" iA
\leqslant $0
endsnippet

context math(context)
snippet != "no equals" iA
\neq 
endsnippet

context math(context)
snippet == " constan equals" iA
\equiv 
endsnippet

context math(context)
snippet ~~ " Amppro equals" iA
\thickapprox 
endsnippet

context math(context)
snippet ~= " Amppro equals2" iA
\cong
endsnippet

context math(context)
snippet >> ">>" iA
\gg
endsnippet

context math(context)
snippet << "<<" iA
\ll
endsnippet

context math(context)
snippet `(?<!\\)RR` iA
\mathbb{R}
endsnippet

context math(context)
snippet `(?<!\\)NN` iA
\mathbb{N}
endsnippet

context math(context)
snippet `(?<!\\)ZZ` iA
\mathbb{Z}
endsnippet

context math(context)
snippet `(?<!\\)QQ` iA
\mathbb{Q}
endsnippet

context math(context)
snippet `(?<!\\)CC` iA
\mathbb{C}
endsnippet

context math(context)
snippet `(?<!\\)VV` iA
\mathcal{V}
endsnippet

context math(context)
snippet `(?<!\\)WW` iA
\mathcal{W}
endsnippet

context math(context)
snippet `(?<!\\)UU` iA
\mathcal{U}
endsnippet

context math(context)
snippet `(?<!\\)FF` iA
\mathbb{F}
endsnippet

# == Auto Environment ==

# ==== Auto Math Mode ====

snippet lm "inline Math" wA
$${1}$$0
endsnippet

snippet dm "display Math" wA
$$
${1}
$$$0
endsnippet

# ==== Common Environment ====

context math(context)
snippet case "cases" wA
\begin{cases}
	$1 \\\\ $2
\end{cases}
endsnippet

context math(context)
snippet ali "aligned" wA
\begin{aligned}
$1 \\\\
\end{aligned}
endsnippet

# == Auto Adaptive Close ==

context math(context)
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context math(context)
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

priority 100
context math(context)
snippet (@ "left( right)" Ai
\left( ${1} \right) $0
endsnippet

priority 100
context math(context)
snippet |@ "left| right|" Ai
\left| ${1} \right| $0
endsnippet

priority 100
context math(context)
snippet {@ "left\{ right\}" Ai
\left\\{ ${1} \right\\} $0
endsnippet

priority 100
context math(context)
snippet [@ "left[ right]" Ai
\left[ ${1} \right] $0
endsnippet

priority 100
context math(context)
snippet <@ "leftangle rightangle" iA
\left<${1} \right>$0
endsnippet

priority 200
context math(context)
snippet norm iA
\left\| ${1} \right\|_{$2}$3
endsnippet

# == context math(context)
snippet ==

# ==== General context math(context)
snippet ====

# ====== Lite context math(context)
snippet ======

context math(context)
snippet tag "tag" iA
\tag{$1}
endsnippet

context math(context)
snippet xyb "Auto (x, y)" iA
(x, y)
endsnippet

context math(context)
snippet xyzb "Auto (x, y ,z)" iA
(x, y, z)
endsnippet

priority 100
context math(context)
snippet `\b([a-zA-Z])n(\d)` "x[n+1]" iA
``rv = m[1]``_{${1:n}+``rv = m[2]``}$0
endsnippet

# Unkown
context math(context)
snippet rij "mrij" iA
(${1:x}_${2:n})_{${3:$2} \\in ${4:N}}$0
endsnippet

priority 200
context math(context)
snippet abs "absolute value" iA
\left\vert ${1} \right\vert $0
endsnippet

context math(context)
snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

# ======== N Series ========

priority 100
context math(context)
snippet comma "comma" iA
${1:\\alpha}_1,${1:\\alpha}_2,\\cdots,${1:\\alpha}_${2:n}
endsnippet

priority 100
context math(context)
snippet plus "plus" iA
${1:k}_1${2:\\alpha}_1+${1:k}_2${2:\\alpha}_2+\\cdots+${1:k}_${3:n}${2:\\alpha}_${3:n}
endsnippet

context math(context)
snippet `\b([a-z])=n` "i=1,2,\cdots,n" wA
``rv = m[1]``=1,2,\cdots,n
endsnippet

# ======== Common Operator ========

context math(context)
snippet `(?<!\\)sum` "sum" wA
\sum\limits_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

context math(context)
snippet taylor "taylor" wA
\sum\limits_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context math(context)
snippet `(?<!\\)lim` "limit" wA
\lim\limits_{${1:n} \to ${2:\infty}} 
endsnippet

context math(context)
snippet `(?<!\\)prod` "product" wA
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context math(context)
snippet `(?<!\\)part` "d/dx" wA
\frac{\partial ${1:V}}{\partial ${2:x}}$0
endsnippet

priority 100
context math(context)
snippet `(?<!\\)diff` "d/dx" wA
\frac{\mathrm{d}${1:y}}{\mathrm{d}${2:x}}$0
endsnippet

context math(context)
snippet buu "bigcup" wA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context math(context)
snippet bnn "bigcap" wA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

priority 100
context math(context)
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3} ~\\mathrm{d}${4:x} $0
endsnippet

context math(context)
snippet deval "d eval" wA
\bigg|_{${1:a}}^{${2:b}} $0
endsnippet

priority 200
context math(context)
snippet `c(o|n)?(l|n)?(b|c)?int` "s 	egral" wA
``
let final = "\\"; // init
let isO = m[1] == "o";
(isO) ? final += "o" : "" // o option
let b = 1;
let isL = m[2] == "l";
(m[3] == 'b') ? b = 2 : (m[3] == 'c') ? b = 3 : 1;
for (let i = 0; i < b - 1; i++) {
final += "i";
}
final += "int";
final += ((b >= 2) || (b != 1 && !isO && isL)) ? "\\limits" : "";
let r = (b == 3) ? "E" : (b == 1 && (isL || isO)) ? "C" : "R";
final += ((b >= 2) || isO || (b == 1 && isL)) ? "_{${1:" + r + "}}" : "_{${1:-\\infty}}^{${2:\\infty}}";
let x = (b == 2) ? "A" : (b == 3) ? "V" : (b == 1 && isL) ? "s" : "x";
final += " ${3} ~\\mathrm{d}${4:" + x + "} $0";
rv = final;
``
endsnippet

# Custom: Can add more defined operator
priority 100
context math(context)
snippet `(?<![\a-zA-Z])(rank|lcm|gcd)` "math function" wA
\\operatorname{``rv = m[1]``}
endsnippet

context math(context)
snippet `(?<![\a-zA-Z])arg(max|min)` "argmin/max" wA
\mathop{\arg\\``rv = m[1]``}
endsnippet

# ====== Big context math(context)
snippet ======

context math(context)
snippet bigdef "Big function" iA
\begin{equation$6}
    \begin{aligned}
        $1\colon $2 &\longrightarrow $3 \\\\
                 $4 &\longmapsto $1($4) = $5
    \end{aligned}
\end{equation$6}$0
endsnippet

context math(context)
snippet bigmin "Optimization problem" iA
\begin{equation$4}
	\begin{aligned}
		\min &\quad ${1:f(x)}\\\\
		\text{s.t.} &\quad ${2:g(x)} \leq 0\\\\
					&\quad ${3:h(x)} = 0\\\\
	\end{aligned}
\end{equaiton$4}$0
endsnippet

context math(context)
snippet bigmax "Optimization problem" wA
\begin{equation$4}
	\begin{aligned}
		\max &\quad ${1:f(x)}\\\\
		\text{s.t.} &\quad ${2:g(x)} \leq 0\\\\
					&\quad ${3:h(x)} = 0\\\\
	\end{aligned}
\end{equation$4}$0
endsnippet

context math(context)
snippet deff "Definition of function" wA
$1\colon ${2:\\mathbb{R\}} \to ${3:\\mathbb{R\}}, ${4:x} \mapsto $0
endsnippet


context math(context)
snippet iid "independent and identical distribution" iA
\overset{\text{i.i.d.}}{\sim}
endsnippet

context math(context)
snippet defe "define equal" wA
\overset{\underset{\mathrm{def}}{}}{=}
endsnippet


# == Matrix ==

# ==== Static Matrix ====

context math(context)
snippet pmat "pmat" w
\begin{pmatrix} 
    ${1: } 
\end{pmatrix} $0
endsnippet

context math(context)
snippet bmat "pmat" w
\begin{bmatrix} 
    $1 
\end{bmatrix} $0
endsnippet

context math(context)
snippet vecC "column vector" iA
\begin{pmatrix} ${1:x}_1 \\\\ ${1:x}_2 \\\\ \vdots \\\\ ${1:x}_${2:n} \end{pmatrix}
endsnippet

context math(context)
snippet vecR "row vector" iA
\begin{pmatrix} ${1:x}_1, ${1:x}_2, \cdots, ${1:x}_${2:n} \end{pmatrix}$0
endsnippet

priority 300
context math(context)
snippet omis "omission" iA
\\begin{pmatrix}${1:1}&${2:1}&\\cdots&${4:1}\\\\${5:1}&${6:1}&\\cdots&${8:1}\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\${13:1}&${14:1}&\\cdots&${16:1}\\end{pmatrix}
endsnippet

priority 300
context math(context)
snippet submat "omission" iA
\\begin{pmatrix}
    ${1:a}_{11} & ${1:a}_{12} & \\cdots & ${1:a}_{1n} \\\\
    ${1:a}_{21} & ${1:a}_{22} & \\cdots & ${1:a}_{2n} \\\\
    \\vdots & \\vdots & \\ddots & \\vdots \\\\
    ${1:a}_{n1} & ${1:a}_{n2} & \\cdots & ${1:a}_{nn}
\\end{pmatrix}
endsnippet

priority 300
context math(context)
snippet subplusmat "omission" iA
\\begin{pmatrix}
    ${1:a}_{11}+{2:b}_{11} & ${1:a}_{12}+{2:b}_{12} & \\cdots & ${1:a}_{1n}+{2:b}_{1n} \\\\
    ${1:a}_{21}+{2:b}_{21} & ${1:a}_{22}+{2:b}_{22} & \\cdots & ${1:a}_{2n}+{2:b}_{2n} \\\\
    \\vdots & \\vdots & \\ddots & \\vdots \\\\
    ${1:a}_{n1}+{2:b}_{n1} & ${1:a}_{n2}+{2:b}_{n2} & \\cdots & ${1:a}_{nn}+{2:b}_{nn}
\\end{pmatrix}
endsnippet

context math(context)
snippet jacobi "jacobi" iA
\\begin{pmatrix}\\frac{\\partial ${1:f}_1}{\\partial ${2:x}_1}&\\frac{\\partial ${1:f}_1}{\\partial ${2:x}_2}&\\cdots&\\frac{\\partial ${1:f}_1}{\\partial ${2:x}_${3:n}}\\\\\\frac{\\partial ${1:f}_2}{\\partial ${2:x}_1}&\\frac{\\partial ${1:f}_2}{\\partial ${2:x}_2}&\\cdots&\\frac{\\partial ${1:f}_2}{\\partial ${2:x}_${3:n}}\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\\\frac{\\partial ${1:f}_${3:m}}{\\partial ${2:x}_1}&\\frac{\\partial ${1:f}_${3:m}}{\\partial ${2:x}_2}&\\cdots&\\frac{\\partial ${1:f}_${3:m}}{\\partial ${2:x}_${3:n}}\\end{pmatrix}
endsnippet

# ==== Dynamic Matrix ====

priority 300
context math(context)
snippet `(b|p|v)mata([1-9])` "bmatrix" iwA
\\begin{``rv = m[1]``matrix}``
	let len = m[2];
	let results = "";
	for (var i=0; i<len; i++){
		results += "$1 &".repeat(len-1) + " $1 \\\\\\\\";
	}
	rv = results;
``\\end{``rv = m[1]``matrix}$0
endsnippet

priority 300
context math(context)
snippet `(b|p|v)mat([1-9])` "bmatrix" iwA
\\begin{``rv = m[1]``matrix}``
	rv = gen_matrix(m[2],m[2]);
``\\end{``rv = m[1]``matrix}$0
endsnippet

priority 300
context math(context)
snippet `vec([1-9])` "col vector" iwA
\\begin{pmatrix}``
    rv = gen_matrix(m[1], 1);
``\\end{pmatrix}$0
endsnippet

priority 300
context math(context)
snippet `vecr([1-9])` "row vector" iwA
\\begin{pmatrix}``
    rv = gen_matrix(1, m[1]);
``\\end{pmatrix}$0
endsnippet


# == General ==

snippet \box "Box" 
``rv = '┌' + '─'.repeat(t[0].length + 2) + '┐'``
│ $1 │
``rv = '└' + '─'.repeat(t[0].length + 2) + '┘'``
endsnippet


priority 300
snippet `table(\d)(\d)` "create table with rows and columns" wA
``
rv = createTable(m[1], m[2]);
``
endsnippet

snippet img "snip img"
``
rv = "<center><img src=\"$1\" width=\"${2:50%}\"></center>"
``
endsnippet